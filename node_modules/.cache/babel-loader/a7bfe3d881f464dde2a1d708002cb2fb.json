{"ast":null,"code":"var _jsxFileName = \"/Users/paulettezaldivarflores/code/Paulette-Zaldivar-Flores/cocktail/src/context/actions/cocktailList-actions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, createContext, useState, useCallback } from 'react';\nimport { searchByName, searchByIngredient, getRandomCocktail, getCocktailDetails } from '../../api/cocktailApi';\nimport CocktailListReducer from '../reducers/cocktailList-reducer';\nimport { CONTEXT_STATUS, CTLIST_ACTIONS } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CocktailListContext = /*#__PURE__*/createContext();\nexport const CTLIST_INITIAL = {\n  status: CONTEXT_STATUS.IDLE,\n  drinks: null,\n  totalDrinks: null,\n  filtered: null,\n  searchTerm: null,\n  error: null\n};\nexport default function CocktailListContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cocktails, cocktailListDispatcher] = useReducer(CocktailListReducer, CTLIST_INITIAL);\n  const [allCocktails, setAllCocktails] = useState(null);\n  const [currentListPage, setCurrentListPage] = useState(1); // SEARCH COCKTAILS\n\n  const searchCocktails = async searchTerm => {\n    try {\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.LOADING\n      });\n      setCurrentListPage(1); // search for cocktails by cocktail name\n\n      const data_name = await searchByName(searchTerm);\n      const drinks_name = data_name !== null && data_name !== void 0 && data_name.drinks ? data_name.drinks : []; // search for cocktails by ingredient\n\n      const data_ingr = await searchByIngredient(searchTerm);\n      const drinks_ingr_initial = data_ingr !== null && data_ingr !== void 0 && data_ingr.drinks ? data_ingr.drinks : []; // remove duplicates\n\n      const ids = new Set(drinks_name.map(d => d.idDrink));\n      const drinks_ingr_shallow = drinks_ingr_initial.filter(d => !ids.has(d.idDrink)); // fill out details for drinks from ingredients search\n\n      const promises = drinks_ingr_shallow.map(async d => {\n        const data = await getCocktailDetails(+d.idDrink);\n        if (!(data !== null && data !== void 0 && data.drinks) || !data.drinks.length) throw new Error('not_found');\n        return data.drinks[0];\n      });\n      const drinks_ingr_full = await Promise.all(promises); // combine results\n\n      const drinks = [...drinks_name, ...drinks_ingr_full];\n      setAllCocktails(drinks);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.UPDATE_LIST,\n        payload: {\n          drinks,\n          totalDrinks: drinks.length,\n          searchTerm,\n          filtered: false\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.ERROR,\n        payload: {\n          error: {\n            statusCode: 400,\n            message: 'Error performing search!  Please try again later.',\n            details: error\n          }\n        }\n      });\n    }\n  }; // GET RANDOM COCKTAILS\n\n\n  const getRandomCocktails = useCallback(async amount => {\n    try {\n      if (!amount) throw new Error('getRandomCocktails function called with no amount value!');\n      if (typeof amount !== 'number') throw new Error('getRandomCocktails requires amount parameter of type number!');\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.LOADING\n      });\n      setCurrentListPage(1);\n      const promises = [...Array(amount)].map(async () => {\n        const data = await getRandomCocktail();\n        return data.drinks[0];\n      });\n      const drinks = await Promise.all(promises);\n      setAllCocktails(drinks);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.UPDATE_LIST,\n        payload: {\n          drinks,\n          totalDrinks: drinks.length,\n          filtered: false\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.ERROR,\n        payload: {\n          error: {\n            statusCode: 400,\n            message: 'Error retreiving random cocktails! Please try again later.',\n            details: error\n          }\n        }\n      });\n    }\n  }, []); // FILTER COCKTAILS\n\n  const filterCocktails = useCallback(selectedFilters => {\n    if (!selectedFilters && !cocktails.filtered) return;\n\n    if (!selectedFilters) {\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.UPDATE_LIST,\n        payload: {\n          drinks: allCocktails,\n          filtered: false\n        }\n      });\n      return;\n    }\n\n    setCurrentListPage(1);\n\n    const passArrayFilter = (testItem, itemArray) => {\n      if (!itemArray) return true;\n      return itemArray.includes(testItem);\n    };\n\n    const {\n      categories = null,\n      glasses = null,\n      alcoholic = null\n    } = selectedFilters;\n    const drinks = allCocktails === null || allCocktails === void 0 ? void 0 : allCocktails.filter(d => passArrayFilter(d.strCategory, categories) && passArrayFilter(d.strGlass, glasses) && passArrayFilter(d.strAlcoholic, alcoholic));\n    cocktailListDispatcher({\n      type: CTLIST_ACTIONS.UPDATE_LIST,\n      payload: {\n        drinks,\n        filtered: true\n      }\n    });\n  }, [allCocktails, cocktails.filtered]); // CLEAR COCKTAILS\n\n  const clearCocktails = async () => {\n    cocktailListDispatcher({\n      type: CTLIST_ACTIONS.CLEAR_LIST\n    });\n    setAllCocktails(null);\n    setCurrentListPage(1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CocktailListContext.Provider, {\n    value: {\n      cocktails,\n      searchCocktails,\n      getRandomCocktails,\n      filterCocktails,\n      clearCocktails,\n      currentListPage,\n      setCurrentListPage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CocktailListContextProvider, \"Jm9namUuskzfR3Pm5ZZRcFaQ8/I=\");\n\n_c = CocktailListContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CocktailListContextProvider\");","map":{"version":3,"names":["React","useReducer","createContext","useState","useCallback","searchByName","searchByIngredient","getRandomCocktail","getCocktailDetails","CocktailListReducer","CONTEXT_STATUS","CTLIST_ACTIONS","CocktailListContext","CTLIST_INITIAL","status","IDLE","drinks","totalDrinks","filtered","searchTerm","error","CocktailListContextProvider","children","cocktails","cocktailListDispatcher","allCocktails","setAllCocktails","currentListPage","setCurrentListPage","searchCocktails","type","LOADING","data_name","drinks_name","data_ingr","drinks_ingr_initial","ids","Set","map","d","idDrink","drinks_ingr_shallow","filter","has","promises","data","length","Error","drinks_ingr_full","Promise","all","UPDATE_LIST","payload","console","ERROR","statusCode","message","details","getRandomCocktails","amount","Array","filterCocktails","selectedFilters","passArrayFilter","testItem","itemArray","includes","categories","glasses","alcoholic","strCategory","strGlass","strAlcoholic","clearCocktails","CLEAR_LIST"],"sources":["/Users/paulettezaldivarflores/code/Paulette-Zaldivar-Flores/cocktail/src/context/actions/cocktailList-actions.js"],"sourcesContent":["import React, { useReducer, createContext, useState, useCallback } from 'react';\nimport {\n  searchByName,\n  searchByIngredient,\n  getRandomCocktail,\n  getCocktailDetails,\n} from '../../api/cocktailApi';\nimport CocktailListReducer from '../reducers/cocktailList-reducer';\nimport { CONTEXT_STATUS, CTLIST_ACTIONS } from '../constants';\n\nexport const CocktailListContext = createContext();\n\nexport const CTLIST_INITIAL = {\n  status: CONTEXT_STATUS.IDLE,\n  drinks: null,\n  totalDrinks: null,\n  filtered: null,\n  searchTerm: null,\n  error: null,\n};\n\nexport default function CocktailListContextProvider({ children }) {\n  const [cocktails, cocktailListDispatcher] = useReducer(\n    CocktailListReducer,\n    CTLIST_INITIAL\n  );\n  const [allCocktails, setAllCocktails] = useState(null);\n  const [currentListPage, setCurrentListPage] = useState(1);\n\n  // SEARCH COCKTAILS\n  const searchCocktails = async (searchTerm) => {\n    try {\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.LOADING,\n      });\n\n      setCurrentListPage(1);\n\n      // search for cocktails by cocktail name\n      const data_name = await searchByName(searchTerm);\n      const drinks_name = data_name?.drinks ? data_name.drinks : [];\n\n      // search for cocktails by ingredient\n      const data_ingr = await searchByIngredient(searchTerm);\n      const drinks_ingr_initial = data_ingr?.drinks ? data_ingr.drinks : [];\n\n      // remove duplicates\n      const ids = new Set(drinks_name.map((d) => d.idDrink));\n      const drinks_ingr_shallow = drinks_ingr_initial.filter(\n        (d) => !ids.has(d.idDrink)\n      );\n\n      // fill out details for drinks from ingredients search\n      const promises = drinks_ingr_shallow.map(async (d) => {\n        const data = await getCocktailDetails(+d.idDrink);\n        if (!data?.drinks || !data.drinks.length) throw new Error('not_found');\n        return data.drinks[0];\n      });\n      const drinks_ingr_full = await Promise.all(promises);\n\n      // combine results\n      const drinks = [...drinks_name, ...drinks_ingr_full];\n\n      setAllCocktails(drinks);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.UPDATE_LIST,\n        payload: {\n          drinks,\n          totalDrinks: drinks.length,\n          searchTerm,\n          filtered: false,\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.ERROR,\n        payload: {\n          error: {\n            statusCode: 400,\n            message: 'Error performing search!  Please try again later.',\n            details: error,\n          },\n        },\n      });\n    }\n  };\n\n  // GET RANDOM COCKTAILS\n  const getRandomCocktails = useCallback(async (amount) => {\n    try {\n      if (!amount)\n        throw new Error(\n          'getRandomCocktails function called with no amount value!'\n        );\n      if (typeof amount !== 'number')\n        throw new Error(\n          'getRandomCocktails requires amount parameter of type number!'\n        );\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.LOADING,\n      });\n\n      setCurrentListPage(1);\n\n      const promises = [...Array(amount)].map(async () => {\n        const data = await getRandomCocktail();\n        return data.drinks[0];\n      });\n      const drinks = await Promise.all(promises);\n\n      setAllCocktails(drinks);\n\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.UPDATE_LIST,\n        payload: { drinks, totalDrinks: drinks.length, filtered: false },\n      });\n    } catch (error) {\n      console.error(error);\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.ERROR,\n        payload: {\n          error: {\n            statusCode: 400,\n            message:\n              'Error retreiving random cocktails! Please try again later.',\n            details: error,\n          },\n        },\n      });\n    }\n  }, []);\n\n  // FILTER COCKTAILS\n  const filterCocktails = useCallback(\n    (selectedFilters) => {\n      if (!selectedFilters && !cocktails.filtered) return;\n      if (!selectedFilters) {\n        cocktailListDispatcher({\n          type: CTLIST_ACTIONS.UPDATE_LIST,\n          payload: { drinks: allCocktails, filtered: false },\n        });\n        return;\n      }\n\n      setCurrentListPage(1);\n\n      const passArrayFilter = (testItem, itemArray) => {\n        if (!itemArray) return true;\n        return itemArray.includes(testItem);\n      };\n\n      const {\n        categories = null,\n        glasses = null,\n        alcoholic = null,\n      } = selectedFilters;\n\n      const drinks = allCocktails?.filter(\n        (d) =>\n          passArrayFilter(d.strCategory, categories) &&\n          passArrayFilter(d.strGlass, glasses) &&\n          passArrayFilter(d.strAlcoholic, alcoholic)\n      );\n\n      cocktailListDispatcher({\n        type: CTLIST_ACTIONS.UPDATE_LIST,\n        payload: { drinks, filtered: true },\n      });\n    },\n    [allCocktails, cocktails.filtered]\n  );\n\n  // CLEAR COCKTAILS\n  const clearCocktails = async () => {\n    cocktailListDispatcher({\n      type: CTLIST_ACTIONS.CLEAR_LIST,\n    });\n    setAllCocktails(null);\n    setCurrentListPage(1);\n  };\n\n  return (\n    <CocktailListContext.Provider\n      value={{\n        cocktails,\n        searchCocktails,\n        getRandomCocktails,\n        filterCocktails,\n        clearCocktails,\n        currentListPage,\n        setCurrentListPage,\n      }}\n    >\n      {children}\n    </CocktailListContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}