{"ast":null,"code":"import { CONTEXT_STATUS, FILTER_ACTIONS } from '../constants';\n\nconst FiltersReducer = (filters, action) => {\n  switch (action.type) {\n    case FILTER_ACTIONS.SET_ALLFILTERS:\n      const {\n        allFilters\n      } = action.payload;\n      return { ...filters,\n        status: CONTEXT_STATUS.SUCCESS,\n        allFilters,\n        error: null\n      };\n\n    case FILTER_ACTIONS.UPDATE_FILTERS:\n      const {\n        updatedFilters\n      } = action.payload; // get acopy of the current selected filters, and overwrite them with updated filters.\n      // if a filter is an empty array, the current will be replaced with that empty array (i.e. filters cleared)\n      // if a filter was not passed in at all, the current will be kept (i.e. if filter is not supplied, keep the current values)\n\n      const combined = { ...filters.selectedFilters,\n        ...updatedFilters\n      }; // remove all empty filter arrays to ensure that filter is now not applied\n\n      const selectedFilters = Object.fromEntries(Object.entries(combined).filter(_ref => {\n        let [_, v] = _ref;\n        return v === null || v === void 0 ? void 0 : v.length;\n      }));\n      return { ...filters,\n        selectedFilters\n      };\n\n    case FILTER_ACTIONS.LOADING:\n      return { ...filters,\n        status: CONTEXT_STATUS.LOADING,\n        error: null\n      };\n\n    case FILTER_ACTIONS.CLEAR_SELECTED:\n      return { ...filters,\n        selectedFilters: null\n      };\n\n    case FILTER_ACTIONS.ERROR:\n      const {\n        error\n      } = action.payload;\n      return { ...filters,\n        status: CONTEXT_STATUS.ERROR,\n        error\n      };\n\n    default:\n      console.log(`Unknown Cocktail List action: ${action.type}`);\n      return filters;\n  }\n};\n\n_c = FiltersReducer;\nexport default FiltersReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FiltersReducer\");","map":{"version":3,"names":["CONTEXT_STATUS","FILTER_ACTIONS","FiltersReducer","filters","action","type","SET_ALLFILTERS","allFilters","payload","status","SUCCESS","error","UPDATE_FILTERS","updatedFilters","combined","selectedFilters","Object","fromEntries","entries","filter","_","v","length","LOADING","CLEAR_SELECTED","ERROR","console","log"],"sources":["/Users/paulettezaldivarflores/code/Paulette-Zaldivar-Flores/cocktail/src/context/reducers/filters-reducers.js"],"sourcesContent":["import { CONTEXT_STATUS, FILTER_ACTIONS } from '../constants';\n\nconst FiltersReducer = (filters, action) => {\n  switch (action.type) {\n    case FILTER_ACTIONS.SET_ALLFILTERS:\n      const { allFilters } = action.payload;\n      return {\n        ...filters,\n        status: CONTEXT_STATUS.SUCCESS,\n        allFilters,\n        error: null,\n      };\n    case FILTER_ACTIONS.UPDATE_FILTERS:\n      const { updatedFilters } = action.payload;\n      // get acopy of the current selected filters, and overwrite them with updated filters.\n      // if a filter is an empty array, the current will be replaced with that empty array (i.e. filters cleared)\n      // if a filter was not passed in at all, the current will be kept (i.e. if filter is not supplied, keep the current values)\n      const combined = { ...filters.selectedFilters, ...updatedFilters };\n      // remove all empty filter arrays to ensure that filter is now not applied\n      const selectedFilters = Object.fromEntries(\n        Object.entries(combined).filter(([_, v]) => v?.length)\n      );\n      return { ...filters, selectedFilters };\n    case FILTER_ACTIONS.LOADING:\n      return { ...filters, status: CONTEXT_STATUS.LOADING, error: null };\n    case FILTER_ACTIONS.CLEAR_SELECTED:\n      return { ...filters, selectedFilters: null };\n    case FILTER_ACTIONS.ERROR:\n      const { error } = action.payload;\n      return { ...filters, status: CONTEXT_STATUS.ERROR, error };\n    default:\n      console.log(`Unknown Cocktail List action: ${action.type}`);\n      return filters;\n  }\n};\n\nexport default FiltersReducer;\n"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,cAAzB,QAA+C,cAA/C;;AAEA,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC1C,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKJ,cAAc,CAACK,cAApB;MACE,MAAM;QAAEC;MAAF,IAAiBH,MAAM,CAACI,OAA9B;MACA,OAAO,EACL,GAAGL,OADE;QAELM,MAAM,EAAET,cAAc,CAACU,OAFlB;QAGLH,UAHK;QAILI,KAAK,EAAE;MAJF,CAAP;;IAMF,KAAKV,cAAc,CAACW,cAApB;MACE,MAAM;QAAEC;MAAF,IAAqBT,MAAM,CAACI,OAAlC,CADF,CAEE;MACA;MACA;;MACA,MAAMM,QAAQ,GAAG,EAAE,GAAGX,OAAO,CAACY,eAAb;QAA8B,GAAGF;MAAjC,CAAjB,CALF,CAME;;MACA,MAAME,eAAe,GAAGC,MAAM,CAACC,WAAP,CACtBD,MAAM,CAACE,OAAP,CAAeJ,QAAf,EAAyBK,MAAzB,CAAgC;QAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;QAAA,OAAYA,CAAZ,aAAYA,CAAZ,uBAAYA,CAAC,CAAEC,MAAf;MAAA,CAAhC,CADsB,CAAxB;MAGA,OAAO,EAAE,GAAGnB,OAAL;QAAcY;MAAd,CAAP;;IACF,KAAKd,cAAc,CAACsB,OAApB;MACE,OAAO,EAAE,GAAGpB,OAAL;QAAcM,MAAM,EAAET,cAAc,CAACuB,OAArC;QAA8CZ,KAAK,EAAE;MAArD,CAAP;;IACF,KAAKV,cAAc,CAACuB,cAApB;MACE,OAAO,EAAE,GAAGrB,OAAL;QAAcY,eAAe,EAAE;MAA/B,CAAP;;IACF,KAAKd,cAAc,CAACwB,KAApB;MACE,MAAM;QAAEd;MAAF,IAAYP,MAAM,CAACI,OAAzB;MACA,OAAO,EAAE,GAAGL,OAAL;QAAcM,MAAM,EAAET,cAAc,CAACyB,KAArC;QAA4Cd;MAA5C,CAAP;;IACF;MACEe,OAAO,CAACC,GAAR,CAAa,iCAAgCvB,MAAM,CAACC,IAAK,EAAzD;MACA,OAAOF,OAAP;EA7BJ;AA+BD,CAhCD;;KAAMD,c;AAkCN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}