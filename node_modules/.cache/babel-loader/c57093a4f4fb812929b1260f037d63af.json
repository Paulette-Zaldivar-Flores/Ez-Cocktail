{"ast":null,"code":"/*\nMaps to endpoints at Cocktail DB API: https://www.thecocktaildb.com/api.php\n*/\nimport sendHttpRequest from '../utils/sendHttpRequest';\nconst BASE_URL = 'https://www.thecocktaildb.com/api/json/v1/1';\nconst URL = {\n  SEARCH: `${BASE_URL}/search.php?s=`,\n  RANDOM: `${BASE_URL}/random.php`,\n  GET_COCKTAIL: `${BASE_URL}/lookup.php?i=`,\n  FILTER: `${BASE_URL}/filter.php?`,\n  FILTER_LIST: `${BASE_URL}/list.php?`\n};\n/**\n * SEARCH BY NAME\n */\n\nconst searchByName = function () {\n  let searchTerm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (typeof searchTerm !== 'string' && typeof searchTerm !== 'number') throw new Error('searchByName api method called with invalid searchTerm!');\n  const results = sendHttpRequest({\n    url: `${URL.SEARCH}${searchTerm}`\n  });\n  return results;\n};\n/**\n * SEARCH BY INGREDIENT\n */\n\n\nconst searchByIngredient = async function () {\n  let searchTerm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (typeof searchTerm !== 'string' && typeof searchTerm !== 'number') throw new Error('searchByName api method called with invalid searchTerm!');\n\n  try {\n    const results = await sendHttpRequest({\n      url: `${URL.FILTER}i=${searchTerm}`\n    });\n    return results;\n  } catch (error) {\n    // There's  quirk with the Cocktail DB api where if you pass an ingredient name that does not exist, the response is broken and cannot be .json()-ed, so adding a try/catch here to catch that scenario and return null in that case (instead of failing)\n    if (error.message === 'Unexpected end of JSON input') return null;\n    throw error;\n  }\n};\n/**\n * GET RANDOM COCKTAIL\n */\n\n\nconst getRandomCocktail = () => {\n  const results = sendHttpRequest({\n    url: URL.RANDOM\n  });\n  return results;\n};\n/**\n * GET DETAILS FOR A SINGLE COCKTAIL\n */\n\n\nconst getCocktailDetails = id => {\n  if (!id) throw new Error('getCocktailDetails api method called with no id!');\n  if (typeof id !== 'number') throw new Error('getCocktailDetails api method must be called with an id that is a number!');\n  const results = sendHttpRequest({\n    url: `${URL.GET_COCKTAIL}${id}`\n  });\n  return results;\n};\n/**\n * GET LIST OF FILTER VALUES\n */\n\n\nconst getFilterListOfCategories = () => sendHttpRequest({\n  url: `${URL.FILTER_LIST}c=list`\n});\n\nconst getFilterListOfGlasses = () => sendHttpRequest({\n  url: `${URL.FILTER_LIST}g=list`\n});\n\nconst getFilterListOfAlcoholic = () => sendHttpRequest({\n  url: `${URL.FILTER_LIST}a=list`\n});\n\nexport { searchByName, searchByIngredient, getRandomCocktail, getCocktailDetails, getFilterListOfCategories, getFilterListOfGlasses, getFilterListOfAlcoholic };","map":{"version":3,"names":["sendHttpRequest","BASE_URL","URL","SEARCH","RANDOM","GET_COCKTAIL","FILTER","FILTER_LIST","searchByName","searchTerm","Error","results","url","searchByIngredient","error","message","getRandomCocktail","getCocktailDetails","id","getFilterListOfCategories","getFilterListOfGlasses","getFilterListOfAlcoholic"],"sources":["/Users/paulettezaldivarflores/code/Paulette-Zaldivar-Flores/cocktail/src/api/cocktailApi.js"],"sourcesContent":["/*\nMaps to endpoints at Cocktail DB API: https://www.thecocktaildb.com/api.php\n*/\n\nimport sendHttpRequest from '../utils/sendHttpRequest';\n\nconst BASE_URL = 'https://www.thecocktaildb.com/api/json/v1/1';\nconst URL = {\n  SEARCH: `${BASE_URL}/search.php?s=`,\n  RANDOM: `${BASE_URL}/random.php`,\n  GET_COCKTAIL: `${BASE_URL}/lookup.php?i=`,\n  FILTER: `${BASE_URL}/filter.php?`,\n  FILTER_LIST: `${BASE_URL}/list.php?`,\n};\n\n/**\n * SEARCH BY NAME\n */\nconst searchByName = (searchTerm = '') => {\n  if (typeof searchTerm !== 'string' && typeof searchTerm !== 'number')\n    throw new Error('searchByName api method called with invalid searchTerm!');\n  const results = sendHttpRequest({\n    url: `${URL.SEARCH}${searchTerm}`,\n  });\n  return results;\n};\n\n/**\n * SEARCH BY INGREDIENT\n */\nconst searchByIngredient = async (searchTerm = '') => {\n  if (typeof searchTerm !== 'string' && typeof searchTerm !== 'number')\n    throw new Error('searchByName api method called with invalid searchTerm!');\n\n  try {\n    const results = await sendHttpRequest({\n      url: `${URL.FILTER}i=${searchTerm}`,\n    });\n\n    return results;\n  } catch (error) {\n    // There's  quirk with the Cocktail DB api where if you pass an ingredient name that does not exist, the response is broken and cannot be .json()-ed, so adding a try/catch here to catch that scenario and return null in that case (instead of failing)\n    if (error.message === 'Unexpected end of JSON input') return null;\n    throw error;\n  }\n};\n\n/**\n * GET RANDOM COCKTAIL\n */\nconst getRandomCocktail = () => {\n  const results = sendHttpRequest({\n    url: URL.RANDOM,\n  });\n  return results;\n};\n\n/**\n * GET DETAILS FOR A SINGLE COCKTAIL\n */\nconst getCocktailDetails = (id) => {\n  if (!id) throw new Error('getCocktailDetails api method called with no id!');\n  if (typeof id !== 'number')\n    throw new Error(\n      'getCocktailDetails api method must be called with an id that is a number!'\n    );\n  const results = sendHttpRequest({\n    url: `${URL.GET_COCKTAIL}${id}`,\n  });\n  return results;\n};\n\n/**\n * GET LIST OF FILTER VALUES\n */\nconst getFilterListOfCategories = () =>\n  sendHttpRequest({\n    url: `${URL.FILTER_LIST}c=list`,\n  });\n\nconst getFilterListOfGlasses = () =>\n  sendHttpRequest({\n    url: `${URL.FILTER_LIST}g=list`,\n  });\n\nconst getFilterListOfAlcoholic = () =>\n  sendHttpRequest({\n    url: `${URL.FILTER_LIST}a=list`,\n  });\n\nexport {\n  searchByName,\n  searchByIngredient,\n  getRandomCocktail,\n  getCocktailDetails,\n  getFilterListOfCategories,\n  getFilterListOfGlasses,\n  getFilterListOfAlcoholic,\n};\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,eAAP,MAA4B,0BAA5B;AAEA,MAAMC,QAAQ,GAAG,6CAAjB;AACA,MAAMC,GAAG,GAAG;EACVC,MAAM,EAAG,GAAEF,QAAS,gBADV;EAEVG,MAAM,EAAG,GAAEH,QAAS,aAFV;EAGVI,YAAY,EAAG,GAAEJ,QAAS,gBAHhB;EAIVK,MAAM,EAAG,GAAEL,QAAS,cAJV;EAKVM,WAAW,EAAG,GAAEN,QAAS;AALf,CAAZ;AAQA;AACA;AACA;;AACA,MAAMO,YAAY,GAAG,YAAqB;EAAA,IAApBC,UAAoB,uEAAP,EAAO;EACxC,IAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkC,OAAOA,UAAP,KAAsB,QAA5D,EACE,MAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;EACF,MAAMC,OAAO,GAAGX,eAAe,CAAC;IAC9BY,GAAG,EAAG,GAAEV,GAAG,CAACC,MAAO,GAAEM,UAAW;EADF,CAAD,CAA/B;EAGA,OAAOE,OAAP;AACD,CAPD;AASA;AACA;AACA;;;AACA,MAAME,kBAAkB,GAAG,kBAA2B;EAAA,IAApBJ,UAAoB,uEAAP,EAAO;EACpD,IAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkC,OAAOA,UAAP,KAAsB,QAA5D,EACE,MAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;;EAEF,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMX,eAAe,CAAC;MACpCY,GAAG,EAAG,GAAEV,GAAG,CAACI,MAAO,KAAIG,UAAW;IADE,CAAD,CAArC;IAIA,OAAOE,OAAP;EACD,CAND,CAME,OAAOG,KAAP,EAAc;IACd;IACA,IAAIA,KAAK,CAACC,OAAN,KAAkB,8BAAtB,EAAsD,OAAO,IAAP;IACtD,MAAMD,KAAN;EACD;AACF,CAfD;AAiBA;AACA;AACA;;;AACA,MAAME,iBAAiB,GAAG,MAAM;EAC9B,MAAML,OAAO,GAAGX,eAAe,CAAC;IAC9BY,GAAG,EAAEV,GAAG,CAACE;EADqB,CAAD,CAA/B;EAGA,OAAOO,OAAP;AACD,CALD;AAOA;AACA;AACA;;;AACA,MAAMM,kBAAkB,GAAIC,EAAD,IAAQ;EACjC,IAAI,CAACA,EAAL,EAAS,MAAM,IAAIR,KAAJ,CAAU,kDAAV,CAAN;EACT,IAAI,OAAOQ,EAAP,KAAc,QAAlB,EACE,MAAM,IAAIR,KAAJ,CACJ,2EADI,CAAN;EAGF,MAAMC,OAAO,GAAGX,eAAe,CAAC;IAC9BY,GAAG,EAAG,GAAEV,GAAG,CAACG,YAAa,GAAEa,EAAG;EADA,CAAD,CAA/B;EAGA,OAAOP,OAAP;AACD,CAVD;AAYA;AACA;AACA;;;AACA,MAAMQ,yBAAyB,GAAG,MAChCnB,eAAe,CAAC;EACdY,GAAG,EAAG,GAAEV,GAAG,CAACK,WAAY;AADV,CAAD,CADjB;;AAKA,MAAMa,sBAAsB,GAAG,MAC7BpB,eAAe,CAAC;EACdY,GAAG,EAAG,GAAEV,GAAG,CAACK,WAAY;AADV,CAAD,CADjB;;AAKA,MAAMc,wBAAwB,GAAG,MAC/BrB,eAAe,CAAC;EACdY,GAAG,EAAG,GAAEV,GAAG,CAACK,WAAY;AADV,CAAD,CADjB;;AAKA,SACEC,YADF,EAEEK,kBAFF,EAGEG,iBAHF,EAIEC,kBAJF,EAKEE,yBALF,EAMEC,sBANF,EAOEC,wBAPF"},"metadata":{},"sourceType":"module"}